import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.a944d67c.js";const B=JSON.parse('{"title":"JS","description":"","frontmatter":{},"headers":[],"relativePath":"articles/javascript/interview_question.md","filePath":"articles/javascript/interview_question.md","lastUpdated":1694580101000}'),p={name:"articles/javascript/interview_question.md"},o=l(`<h1 id="JS" tabindex="-1">JS <a class="header-anchor" href="#JS" aria-label="Permalink to &quot;JS&quot;">​</a></h1><h4 id="js%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E7%BA%BF%E7%A8%8B" tabindex="-1">js为什么是单线程 <a class="header-anchor" href="#js为什么是单线程" aria-label="Permalink to &quot;js为什么是单线程&quot;">​</a></h4><p>js设计之初是为了加快客户端和服务器的访问，多线程的话，多个地方改变dom元素，会导致页面混乱，更难设计</p><h4 id="JavaScript%E5%87%A0%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" tabindex="-1">JavaScript几种数据类型 <a class="header-anchor" href="#JavaScript几种数据类型" aria-label="Permalink to &quot;JavaScript几种数据类型&quot;">​</a></h4><ul><li>number：数字类型</li><li>string：字符串类型</li><li>boolean：布尔值类型</li><li>undefined：未定义类型 NaN</li><li>null：空值类型 0</li><li>object：对象类型</li><li>symbol：symbol类型；可以作为属性名，防止命名冲突</li><li>bigint：大数字类型 |<code>BigInt</code>是ES10新加的一种JavaScript数据类型，用来表示表示大于 <code>2^53 - 1</code> 的整数，<code>2^53 - 1</code>是ES10之前，JavaScript所能表示最大的数字</li></ul><h4 id="var%E3%80%81const%E3%80%81let" tabindex="-1">var、const、let <a class="header-anchor" href="#var、const、let" aria-label="Permalink to &quot;var、const、let&quot;">​</a></h4><ul><li>var 可以重复声明同一个变量，let、const不能</li><li>var有变量提升，有初始化提升，值可变</li><li>let有变量提升，没有初始化提升，值可变</li><li>const有变量提升，没有初始化提升，值不可变，但如果是定义对象，则属性可变</li><li>let、const拥有块级作用域</li></ul><h4 id="%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E4%B8%ADSymbol%E5%B1%9E%E6%80%A7" tabindex="-1">获取对象中Symbol属性 <a class="header-anchor" href="#获取对象中Symbol属性" aria-label="Permalink to &quot;获取对象中Symbol属性&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">// 方法一</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">getOwnPropertySymbols</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// [ Symbol(gender) ]</span></span>
<span class="line"><span style="color:#A0ADA0;">// 方法二</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Reflect</span><span style="color:#999999;">.</span><span style="color:#59873A;">ownKeys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// [ &#39;name&#39;, &#39;age&#39;, Symbol(gender) ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="for%20in%E5%92%8C%20for%20of" tabindex="-1">for in和 for of <a class="header-anchor" href="#for in和 for of" aria-label="Permalink to &quot;for in和 for of&quot;">​</a></h4><ul><li>for in ：遍历方法，可遍历对象和数组 【key是健值】</li><li>for of ：遍历方法，只能遍历数组，不能遍历非iterable对象 【key是value】</li></ul><h4 id="JS%E6%95%B4%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA" tabindex="-1">JS整数的表示 <a class="header-anchor" href="#JS整数的表示" aria-label="Permalink to &quot;JS整数的表示&quot;">​</a></h4><p><img src="https://gitee.com/zhaogancheng/typora-map-depot/raw/master/image-20220315103540374.png" alt="image-20220315103540374"></p><h4 id="call%E3%80%81apply%E3%80%81bind" tabindex="-1">call、apply、bind <a class="header-anchor" href="#call、apply、bind" aria-label="Permalink to &quot;call、apply、bind&quot;">​</a></h4><ul><li>call 可以改变函数this指向，第一个参数为this指向的目标，后续参数为传递给函数的实参</li><li>apply 与call基本类似，区别在于传递参数是成一个数组集合 fun.apply(obj,[arg1,arg2])</li><li>bind 与call基本类似，区别在于是否立即执行，它返回一个被bind 处理完成的函数，我们只需接受，在需要的时候调用</li></ul><h4 id="%E4%BA%8B%E4%BB%B6%E6%B5%81" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-label="Permalink to &quot;事件流&quot;">​</a></h4><ul><li><p>捕获阶段，目标阶段，和冒泡阶段。</p></li><li><p>IE提出的事件流是事件冒泡，即从下至上，从目标触发的元素逐级向上传播，直到window对象。[事件委托应用]</p></li><li><p>而Netscape的事件流就是事件捕获，即从document逐级向下传播到目标元素。由于IE低版本浏览器不支持，所以很少使用事件捕获。</p><p>事件冒泡常应用于【事件委托】，避免不必要的多次定义事件监听</p></li></ul><h4 id="%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%92%8C%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A" tabindex="-1">普通函数和箭头函数的区别： <a class="header-anchor" href="#普通函数和箭头函数的区别：" aria-label="Permalink to &quot;普通函数和箭头函数的区别：&quot;">​</a></h4><ul><li>1、箭头函数不可作为构造函数，不能使用new</li><li>2、箭头函数没有自己的this</li><li>3、箭头函数没有arguments对象</li><li>4、箭头函数没有原型对象</li></ul><h4 id="new%20%E7%9A%84%E8%BF%87%E7%A8%8B" tabindex="-1">new 的过程 <a class="header-anchor" href="#new 的过程" aria-label="Permalink to &quot;new 的过程&quot;">​</a></h4><p>(1) 创建一个新对象； (2) 设置新对象的 constructor 属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的 prototype 对象； (3) 使用新对象调用函数，函数中的 this 被指向新实例对象： (4) 返回新对象。 如果无返回值或者返回一个非对象值，则将新对象返回；如果返回值是一个新对象的话那么直接直接返回该对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">// 1. 创建空对象；</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{};</span></span>
<span class="line"><span style="color:#A0ADA0;">// 2. 设置新对象的 constructor 属性为构造函数的名称，设置新对象的__proto__属性指向构造函数的 prototype 对象；</span></span>
<span class="line"><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#998418;">ClassA</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#A0ADA0;">// 3. 使用新对象调用函数，函数中的 this 被指向新实例对象：</span></span>
<span class="line"><span style="color:#B07D48;">ClassA</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//{}.构造函数();</span></span>
<span class="line"><span style="color:#A0ADA0;">// 4. 如果无返回值或者返回一个非对象值，则将新对象返回；如果返回值是一个新对象的话那么直接直接返回该对象。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myNew</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">...</span><span style="color:#B07D48;">args</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 基于原型链 创建一个新对象</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newObj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">create</span><span style="color:#999999;">(</span><span style="color:#998418;">fn</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 添加属性到新对象上 并获取obj函数的结果</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">newObj</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">...</span><span style="color:#B07D48;">args</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果执行结果有返回值并且是一个对象, 返回执行的结果, 否则, 返回新创建的对象</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">object</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newObj</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="JavaScript%E6%9C%80%E5%A4%A7%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%97%E4%B8%8E%E6%9C%80%E5%B0%8F%E5%AE%89%E5%85%A8%E6%95%B0%E5%AD%97%EF%BC%9F" tabindex="-1">JavaScript最大安全数字与最小安全数字？ <a class="header-anchor" href="#JavaScript最大安全数字与最小安全数字？" aria-label="Permalink to &quot;JavaScript最大安全数字与最小安全数字？&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Number</span><span style="color:#999999;">.</span><span style="color:#393A34;">MAX_SAFE_INTEGER</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span><span style="color:#2F798A;">2</span><span style="color:#AB5959;">^</span><span style="color:#2F798A;">53</span><span style="color:#AB5959;">-</span><span style="color:#2F798A;">1</span></span>
<span class="line"><span style="color:#A0ADA0;">// 9007199254740991</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Number</span><span style="color:#999999;">.</span><span style="color:#393A34;">MIN_SAFE_INTEGER</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">-</span><span style="color:#2F798A;">2</span><span style="color:#AB5959;">^</span><span style="color:#2F798A;">53</span><span style="color:#AB5959;">-</span><span style="color:#2F798A;">1</span></span>
<span class="line"><span style="color:#A0ADA0;">// -9007199254740991</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">Number类型的最大值为2的53次方</span><span style="color:#393A34;">，</span><span style="color:#B07D48;">即9007199254740992</span><span style="color:#393A34;">，</span><span style="color:#B07D48;">如果超过这个值</span><span style="color:#393A34;">，</span><span style="color:#B07D48;">比如900719925474099222</span><span style="color:#393A34;">，</span><span style="color:#B07D48;">那么得到的值会不精确</span><span style="color:#393A34;">，</span><span style="color:#B07D48;">也就是900719925474099200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB" tabindex="-1">深拷贝与浅拷贝的区别 <a class="header-anchor" href="#深拷贝与浅拷贝的区别" aria-label="Permalink to &quot;深拷贝与浅拷贝的区别&quot;">​</a></h4><ul><li><p>深拷贝层层拷贝，浅拷贝只拷贝第一层，深层只是引用</p></li><li><p>在深拷贝中，新对象中的更改不会影响原始对象，而在浅拷贝中，新对象中的更改，原始对象中也会跟着改。</p></li><li><p>在深拷贝中，原始对象不与新对象共享相同的属性，而在浅拷贝中，它们具有相同的属性。</p></li></ul><h4 id="%E9%97%AD%E5%8C%85%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" tabindex="-1">闭包是什么？ <a class="header-anchor" href="#闭包是什么？" aria-label="Permalink to &quot;闭包是什么？&quot;">​</a></h4><p>闭包是一个能读取其他函数内部变量的函数</p><ul><li>优点：使外部能访问到局部的东西</li><li>1.可以将一个变量长期储存在内存中，用于缓存</li></ul><p>​ 2.可以避免全局变量的污染</p><p>​ 3.加强封装性，是实现了对变量的隐藏和封装</p><ul><li>缺点：使用不当容易造成内存泄漏的问题</li></ul><h4 id="%E5%8E%9F%E5%9E%8B%E9%93%BE" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h4><h5 id="prototype%E5%92%8C__proto__" tabindex="-1">prototype和__proto__ <a class="header-anchor" href="#prototype和__proto__" aria-label="Permalink to &quot;prototype和__proto__&quot;">​</a></h5><p>这两个东西到底是啥呢？</p><ul><li>prototype: 显式原型</li><li>__ proto__: 隐式原型</li></ul><p>一般，<code>构造函数</code>的prototype和其<code>实例</code>的__proto__是指向同一个地方的，这个地方就叫做<code>原型对象</code>；那什么是构造函数呢？俗话说就是，可以用来<code>new</code>的函数就叫构造函数，箭头函数不能用来当做构造函数哦</p><h5 id="%E5%AF%B9%E8%B1%A1" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h5><p>咱们平常开发中，创建一个对象，通常会用以下几种方法。</p><ul><li><p><code>构造函数创建对象</code>，他创建出来的对象都是此<code>Function构造函数</code>的实例，所以这里不讨论它</p></li><li><p><code>字面量创建对象</code></p></li><li><p><code>new Object创建对象</code></p></li><li><p><code>Object.create创建对象</code>，创建出来的是一个空原型的对象，这里不讨论它</p></li><li><p>工厂模式创建</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createObj</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Object</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createObj</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Sunshine_Lin</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><p>我们之前说过，<code>构造函数</code>的<code>prototype</code>和其<code>实例</code>的<code>__proto__</code>是指向同一个地方的，这里的<code>person2，person3</code>其实也都是<code>Object构造函数</code>的实例，那我们来验证一下吧</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person2</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#998418;">age</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span><span style="color:#999999;">}</span><span style="color:#A0ADA0;">//本质上也是通过 new Object()  创建的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person3</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Object</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">person3</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#B07D48;">person3</span><span style="color:#999999;">.</span><span style="color:#B07D48;">age</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person2</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person3</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="Function%E5%92%8CObject" tabindex="-1">Function和Object <a class="header-anchor" href="#Function和Object" aria-label="Permalink to &quot;Function和Object&quot;">​</a></h5><p>上面咱们常说</p><ul><li><code>函数</code>是<code>Function构造函数</code>的实例</li><li><code>对象</code>是<code>Object构造函数</code>的实例</li></ul><p>那<code>Function构造函数</code>和<code>Object构造函数</code>他们两个又是谁的实例呢？</p><ul><li><code>function Object()</code>其实也是个函数，所以他是<code>Function构造函数</code>的实例</li><li><code>function Function()</code>其实也是个函数，所以他也是<code>Function构造函数</code>的实例，没错，他是他自己本身的实例</li></ul><p>咱们可以试验一下就知道了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Function</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Function</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Function</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h5><p>constructor和prototype是成对的，你指向我，我指向你。prototype是构造函数的原型对象，而constructor作为prototype的一个属性，又指向该prototype对象的所对应的构造函数</p><h5 id="Person.prototype%20%E5%92%8C%20Function.prototype" tabindex="-1">Person.prototype 和 Function.prototype <a class="header-anchor" href="#Person.prototype 和 Function.prototype" aria-label="Permalink to &quot;Person.prototype 和 Function.prototype&quot;">​</a></h5><p>讨论原型链之前，咱们先来聊聊这两个东西</p><ul><li>Person.prototype，它是<code>构造函数Person</code>的原型对象</li><li>Function.prototype，他是<code>构造函数Function</code>的原型对象</li></ul><p>都说了原型对象，原型对象，可以知道其实这两个本质都是<code>对象</code></p><p>那既然是<code>对象</code>，本质肯定都是通过<code>new Object()</code>来创建的。既然是通过<code>new Object()</code>创建的，那就说明<code>Person.prototype 和 Function.prototype</code>都是<code>构造函数Object</code>的实例。也就说明了<code>Person.prototype 和 Function.prototype</code>他们两的<code>__proto__</code>都指向<code>Object.prototype</code></p><p>咱们可以验证一下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Person</span><span style="color:#999999;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Person</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#998418;">Function</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#998418;">__proto__</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%88%E7%82%B9" tabindex="-1">原型链终点 <a class="header-anchor" href="#原型链终点" aria-label="Permalink to &quot;原型链终点&quot;">​</a></h5><p>Object.prototype\`其实也有__proto__，指向null，那才是原型链的终点</p><h5 id="%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF" tabindex="-1">原型继承 <a class="header-anchor" href="#原型继承" aria-label="Permalink to &quot;原型继承&quot;">​</a></h5><p>说到原型，就不得不说补充一下<code>原型继承</code>这个知识点了，<code>原型继承</code>就是，<code>实例</code>可以使用<code>构造函数上的prototype</code>中的方法</p><h5 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h5><p>使用方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#B07D48;">A</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">B</span></span>
<span class="line"><span style="color:#B07D48;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>作用：<strong>判断B的prototype是否在A的原型链上</strong></p><p>例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Person</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 构造函数</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">person</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Person</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 实例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Person</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Function</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Person</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Object</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">person</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Person</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">person</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Object</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="%E4%B9%A0%E9%A2%98%EF%BC%9Ahttps%3A%2F%2Fjuejin.cn%2Fpost%2F7008526225207640078" tabindex="-1">习题：<a href="https://juejin.cn/post/7008526225207640078" target="_blank" rel="noreferrer">https://juejin.cn/post/7008526225207640078</a> <a class="header-anchor" href="#习题：https%3A%2F%2Fjuejin.cn%2Fpost%2F7008526225207640078" aria-label="Permalink to &quot;习题：https://juejin.cn/post/7008526225207640078&quot;">​</a></h5><h4 id="%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h4><ul><li><p>js预编译阶段，会将var的变量声明、以及函数声明提升到所属作用域顶部；然后依次向下执行</p></li><li><p>函数声明优先级高于变量声明；(变量提升时 函数声明会优先覆盖同名的变量提升)</p></li><li><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">console.log(fun) // fun () {}  函数声明优先级高于变量声明，故此处不是undefined</span></span>
<span class="line"><span style="color:#393a34;"> // 函数声明</span></span>
<span class="line"><span style="color:#393a34;"> function fun() { }</span></span>
<span class="line"><span style="color:#393a34;"> // 函数表达式</span></span>
<span class="line"><span style="color:#393a34;"> var fun = function (name) { }</span></span>
<span class="line"><span style="color:#393a34;">  </span></span>
<span class="line"><span style="color:#393a34;"> console.log(fun) // fun (name) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h4 id="%E8%A7%A3%E5%86%B3%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E6%97%B6%EF%BC%8C%E6%8A%8A%E5%8E%9F%E5%9E%8B%E4%B8%8A%E7%9A%84%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%E5%87%BA%E6%9D%A5%E4%BA%86%E5%92%8B%E5%8A%9E%EF%BC%9F" tabindex="-1">解决遍历对象时，把原型上的属性遍历出来了咋办？ <a class="header-anchor" href="#解决遍历对象时，把原型上的属性遍历出来了咋办？" aria-label="Permalink to &quot;解决遍历对象时，把原型上的属性遍历出来了咋办？&quot;">​</a></h4><p>使用<code>hasOwnProperty</code>判断是否属于自己的独立属性(非原型属性)</p><h4 id="JavaScript%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%85%B7%E4%BD%93%E5%AD%98%E5%82%A8%E5%BD%A2%E5%BC%8F%EF%BC%9F" tabindex="-1">JavaScript变量在内存中具体存储形式？ <a class="header-anchor" href="#JavaScript变量在内存中具体存储形式？" aria-label="Permalink to &quot;JavaScript变量在内存中具体存储形式？&quot;">​</a></h4><ul><li>基本数据类型：存在<code>栈内存</code>里</li><li>引用数据类型：指针存<code>栈内存</code>，指向<code>堆内存</code>中一块地址，内容存在堆内存中</li></ul><h4 id="%E8%AE%B2%E4%B8%80%E8%AE%B2JavaScript%E7%9A%84%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1%EF%BC%9F" tabindex="-1">讲一讲JavaScript的装箱和拆箱？ <a class="header-anchor" href="#讲一讲JavaScript的装箱和拆箱？" aria-label="Permalink to &quot;讲一讲JavaScript的装箱和拆箱？&quot;">​</a></h4><h5 id="%E8%A3%85%E7%AE%B1%EF%BC%9A%E6%8A%8A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C" tabindex="-1">装箱：把基本数据类型转化为对应的引用数据类型的操作 <a class="header-anchor" href="#装箱：把基本数据类型转化为对应的引用数据类型的操作" aria-label="Permalink to &quot;装箱：把基本数据类型转化为对应的引用数据类型的操作&quot;">​</a></h5><p>看以下代码，s1只是一个基本数据类型，他是怎么能调用<code>indexOf</code>的呢？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">s1</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Sunshine_Lin</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">index</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">s1</span><span style="color:#999999;">.</span><span style="color:#59873A;">indexOf</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">_</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">index</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 8</span></span>
<span class="line"><span style="color:#B07D48;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>原来是JavaScript内部进行了装箱操作</p><ul><li>1、创建String类型的一个实例；</li><li>2、在实例上调用指定的方法；</li><li>3、销毁这个实例；</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">temp</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">String</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Sunshine_Lin</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">index</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">temp</span><span style="color:#999999;">.</span><span style="color:#59873A;">indexOf</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">_</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">temp</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">index</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 8</span></span>
<span class="line"><span style="color:#B07D48;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="%E6%8B%86%E7%AE%B1%EF%BC%9A%E5%B0%86%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%93%8D%E4%BD%9C" tabindex="-1">拆箱：将引用数据类型转化为对应的基本数据类型的操作 <a class="header-anchor" href="#拆箱：将引用数据类型转化为对应的基本数据类型的操作" aria-label="Permalink to &quot;拆箱：将引用数据类型转化为对应的基本数据类型的操作&quot;">​</a></h5><p>通过<code>valueOf</code>或者<code>toString</code>方法实现拆箱操作</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objNum</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Number</span><span style="color:#999999;">(</span><span style="color:#2F798A;">123</span><span style="color:#999999;">);</span><span style="color:#393A34;">  </span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objStr</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">String</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">123</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span><span style="color:#393A34;">   </span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objNum</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//object</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objStr</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//object </span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objNum</span><span style="color:#999999;">.</span><span style="color:#59873A;">valueOf</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//number</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objStr</span><span style="color:#999999;">.</span><span style="color:#59873A;">valueOf</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objNum</span><span style="color:#999999;">.</span><span style="color:#59873A;">toString</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// string </span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">objStr</span><span style="color:#999999;">.</span><span style="color:#59873A;">toString</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="null%E5%92%8Cundefined%E7%9A%84%E5%BC%82%E5%90%8C%E7%82%B9%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F" tabindex="-1">null和undefined的异同点有哪些？ <a class="header-anchor" href="#null和undefined的异同点有哪些？" aria-label="Permalink to &quot;null和undefined的异同点有哪些？&quot;">​</a></h4><p>相同点</p><ul><li>都是空变量</li><li>都是假值，转布尔值都是false</li><li>null == undefined 为 true</li></ul><p>不同点</p><ul><li>typeof判断null为object，判断undefined为undefined</li><li>null转数字为0，undefined转数字为NaN</li><li>null是一个对象未初始化，undefined是声明了，但未初始化 赋值</li><li>null === undefined 为 false</li></ul><h4 id="%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9F" tabindex="-1">如何判断数据类型？ <a class="header-anchor" href="#如何判断数据类型？" aria-label="Permalink to &quot;如何判断数据类型？&quot;">​</a></h4><ul><li><p>typeof xxx：能判断出number，string，undefined，boolean，object，function（null是object），所有引用类型都是object</p></li><li><p>Object.prototype.toString.call(xxx)：能判断出大部分类型</p></li><li><p>Array.isArray(xxx)：判断是否为数组</p></li><li><p>instanceof 判断具体的引用类型</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">console.log(person instanceof Object) // true 判断Object的prototype是否在person的原型链上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h4 id="%E4%B8%BA%E4%BB%80%E4%B9%88typeof%20null%20%E6%98%AFobject%EF%BC%9F" tabindex="-1">为什么typeof null 是object？ <a class="header-anchor" href="#为什么typeof null 是object？" aria-label="Permalink to &quot;为什么typeof null 是object？&quot;">​</a></h4><p>不同的数据类型在底层都是通过二进制表示的，二进制前三位为<code>000</code>则会被判断为<code>object</code>类型，而null底层的二进制全都是0，那前三位肯定也是<code>000</code>，所以被判断为<code>object</code></p><h4 id="%E6%B3%A8%E6%84%8F%E7%82%B9" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h4><ul><li><p>undefined &gt;= undefined 是 false 【按照<code>隐式转换规则</code>，可转换成<code>NaN &gt;= NaN</code>，NaN 不等于 NaN，也不大于，所以是<code>false</code>】</p></li><li><p>null &gt;= null 是 true 【按照<code>隐式转换规则</code>，可转换成<code>0 &gt;= 0</code>，0 等于 0，所以是<code>true</code>】</p></li><li><p>[] == ![] 是 true</p></li><li><p>0.1 + 0.2 === 0.3，对吗？【不对，JavaScript中小数是浮点数，需转二进制进行运算，有些小数无法用二进制表示，所以只能取近似值】</p></li><li><p>精度丢失解决方案</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">对于整数，前端出现问题的几率可能比较低，毕竟很少有业务需要需要用到超大整数，只要运算结果不超过 Math.pow(2, 53) 就不会丢失精度。</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">对于小数，前端出现问题的几率还是很多的，尤其在一些电商网站涉及到金额等数据。解决方式：把小数放到位整数(乘倍数)，再缩小回原来倍数(除倍数)</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">例如0.1+0.2</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">(0.1*10 + 0.2*10) / 10 == 0.3 // true</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">关于数字超长的情况</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">我是直接 num + &#39;&#39;</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">转成字符串</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>NaN是什么？有什么特点？</p><ul><li>NaN不等于自身，也就是 <code>NaN === NaN</code> 为 <code>false</code></li><li>NaN为假值，转布尔值为<code>false</code></li><li>NaN本质是一个number，<code>typeof NaN === number</code></li></ul></li><li><p>Set<code>的不重复性中，要注意</code>引用数据类型和NaN</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">// 两个对象都是不同的指针，所以没法去重</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">set1</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Set</span><span style="color:#999999;">([</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">}])</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">set1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Set(4) { 1, { name: &#39;林三心&#39; }, 2, { name: &#39;林三心&#39; } }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 如果是两个对象是同一指针，则能去重</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">set2</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Set</span><span style="color:#999999;">([</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">set2</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Set(3) { 1, { name: &#39;林三心&#39; }, 2 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//咱们都知道 NaN !== NaN，NaN是自身不等于自身的，但是在Set中他还是会被去重</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">set</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Set</span><span style="color:#999999;">([</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">NaN</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">NaN</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">set</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// Set(2) { 1, NaN }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h4 id="%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E6%95%B0%E7%BB%84%E3%80%81%E7%B1%BB%E6%95%B0%E7%BB%84%E5%80%9F%E7%94%A8%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95" tabindex="-1">类数组转数组、类数组借用数组方法 <a class="header-anchor" href="#类数组转数组、类数组借用数组方法" aria-label="Permalink to &quot;类数组转数组、类数组借用数组方法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#A0ADA0;">/* console.log(ar);</span></span>
<span class="line"><span style="color:#A0ADA0;">        // let arr = Array.from(ar); 方法1</span></span>
<span class="line"><span style="color:#A0ADA0;">        let arr = [...ar]; //  方法2</span></span>
<span class="line"><span style="color:#A0ADA0;">        console.log(arr); */</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#A0ADA0;">// let arr = Array.prototype.slice.call(ar); //  方法3</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arr</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[].</span><span style="color:#B07D48;">slice</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ar</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//  方法4 简写</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">arr</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">fn</span><span style="color:#999999;">(</span><span style="color:#2F798A;">30</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">20</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#B07D48;">直接类数组借用数组方法</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">[].</span><span style="color:#B07D48;">forEach</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ar</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">fn</span><span style="color:#999999;">(</span><span style="color:#2F798A;">10</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">20</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">30</span><span style="color:#999999;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="%E5%A6%82%E6%9E%9C%E4%B8%80%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8Cbind%E4%BA%86%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%94%A8%E8%BF%99%E4%B8%AA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BA%E5%87%BA%E7%9A%84%E5%AE%9E%E4%BE%8B%E4%BC%9A%E7%BB%A7%E6%89%BF%E8%BF%99%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%97%EF%BC%9F%E4%B8%BA%E4%BB%80%E4%B9%88%EF%BC%9F" tabindex="-1">如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？ <a class="header-anchor" href="#如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？" aria-label="Permalink to &quot;如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？&quot;">​</a></h4><p>不会继承，因为根据 this 绑定四大规则，new 绑定的优先级高于 bind 显示绑定，通过 new 进行构造函数调用时，会创建一个新对象，这个新对象会代替 bind 的对象绑定，作为此函数的 this，并且在此函数没有返回对象的情况下，返回这个新建的对象</p><h4 id="%E5%A6%82%E4%BD%95%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E9%98%BB%E6%AD%A2%E4%BA%8B%E4%BB%B6%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA%EF%BC%9F" tabindex="-1">如何阻止事件冒泡？如何阻止事件默认行为？ <a class="header-anchor" href="#如何阻止事件冒泡？如何阻止事件默认行为？" aria-label="Permalink to &quot;如何阻止事件冒泡？如何阻止事件默认行为？&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">stopBubble</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">.</span><span style="color:#B07D48;">stopPropagation</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">e</span><span style="color:#999999;">.</span><span style="color:#59873A;">stopPropagation</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">event</span><span style="color:#999999;">.</span><span style="color:#B07D48;">cancelBubble</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">true</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">stopDefault</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">.</span><span style="color:#B07D48;">preventDefault</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">e</span><span style="color:#999999;">.</span><span style="color:#59873A;">preventDefault</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">event</span><span style="color:#999999;">.</span><span style="color:#B07D48;">returnValue</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F" tabindex="-1">处理异步的方法有哪些？ <a class="header-anchor" href="#处理异步的方法有哪些？" aria-label="Permalink to &quot;处理异步的方法有哪些？&quot;">​</a></h4><ul><li>回调函数</li><li>promise</li><li>事件监听</li><li>发布订阅</li><li>async await</li></ul><h4 id="JavaScript%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F%E6%9C%89%E5%87%A0%E7%A7%8D%EF%BC%9F" tabindex="-1">JavaScript继承方式有几种？ <a class="header-anchor" href="#JavaScript继承方式有几种？" aria-label="Permalink to &quot;JavaScript继承方式有几种？&quot;">​</a></h4><ul><li><p>extends</p></li><li><p>原型链继承</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Parent</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">type</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">parentType</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Child</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">type</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">childType</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#A0ADA0;">// 直接实例化之后赋值到Child.prototype</span></span>
<span class="line"><span style="color:#998418;">Child</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Parent</span><span style="color:#999999;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>组合式继承</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Child</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">childType</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">parentType</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#999999;">	</span><span style="color:#A0ADA0;">// 说了用apply也行，只不过入参是个数组</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">Parent</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">,</span><span style="color:#B07D48;">parentType</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">childType</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">childType</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#998418;">Child</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Parent</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#998418;">Child</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#998418;">constructor</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Child</span><span style="color:#999999;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>构造继承</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Cat</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">Animal</span><span style="color:#999999;">.</span><span style="color:#59873A;">call</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Tom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">cat</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Cat</span><span style="color:#999999;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>实例继承 ；核心：为父类实例添加新特性，作为子类实例返回</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Cat</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Animal</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Tom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">instance</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">cat</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Cat</span><span style="color:#999999;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>拷贝继承</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Cat</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">animal</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Animal</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">for</span><span style="color:#999999;">(</span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">animal</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">Cat</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">[</span><span style="color:#B07D48;">p</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">animal</span><span style="color:#999999;">[</span><span style="color:#B07D48;">p</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">Tom</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h4 id="JavaScript%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" tabindex="-1">JavaScript的垃圾回收机制 <a class="header-anchor" href="#JavaScript的垃圾回收机制" aria-label="Permalink to &quot;JavaScript的垃圾回收机制&quot;">​</a></h4><ul><li><p>引用法：就是判断一个对象的引用数，引用数<code>为0</code>就回收，引用数<code>大于0</code>就不回收。</p></li><li><p>标记法：标记法就是，将<code>可达</code>的对象标记起来，<code>不可达</code>的对象当成垃圾回收。言归正传，想要判断可不可达，就不得不说<code>可达性</code>了，<code>可达性</code>是什么？就是从初始的<code>根对象（window或者global）</code>的指针开始，向下搜索子节点，子节点被搜索到了，说明该子节点的引用对象可达，并为其进行标记，然后接着递归搜索，直到所有子节点被遍历结束。那么没有被遍历到节点，也就没有被标记，也就会被当成没有被任何地方引用，就可以证明这是一个需要被释放内存的对象，可以被垃圾回收器回收。</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">// 可达</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">林三心</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">arr</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 林三心</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// { arr: [1, 2, 3] }</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#B07D48;">arr</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#B07D48;">arr</span><span style="color:#999999;">[</span><span style="color:#2F798A;">1</span><span style="color:#999999;">])</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fn</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">age</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">22</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#A0ADA0;">// 不可达</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">window</span><span style="color:#999999;">.</span><span style="color:#B07D48;">age</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// undefined。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h4 id="js%E8%84%9A%E6%9C%AC%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98%EF%BC%8Casync%E3%80%81defer" tabindex="-1">js脚本加载问题，async、defer <a class="header-anchor" href="#js脚本加载问题，async、defer" aria-label="Permalink to &quot;js脚本加载问题，async、defer&quot;">​</a></h4><ul><li>正常模式：这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>async(异步) 模式，async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">&lt;script async src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>defer(延缓) 模式；defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">&lt;script defer src=&quot;index.js&quot;&gt;&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">1.js文件放在body里面，则是按照body的加载顺序（按先后顺序）进行加载</span></span>
<span class="line"><span style="color:#393a34;">2.js文件放在&lt;head&gt;标签里面的文件，则是在body加载完之后，才加载头部的js文件</span></span>
<span class="line"><span style="color:#393a34;">在body里面加载的 js文件 和 onload函数的加载顺序：onload函数会优先于 js文件的加载</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" tabindex="-1">内存泄漏 <a class="header-anchor" href="#内存泄漏" aria-label="Permalink to &quot;内存泄漏&quot;">​</a></h4><p>影响：</p><ul><li>什么是内存泄漏呢？就是有些理应被回收的垃圾，却没被回收，这就造成了垃圾越积越多。内存泄漏，听起来很遥远，但其实离我们很近很近，我们平时都直接或者间接地去接触过它。例如，有时候你的页面，用着用着就卡了起来，而且随着时间的延长，越来越卡，那这个时候，就要考虑是否是内存泄漏问题了，内存泄漏是影响用户体验的重大问题，所以平时通过正确的代码习惯去避免它，是非常有必要的。</li></ul><p>避免：</p><ol><li>清除定时器</li><li>尽量避免使用全局变量</li><li>合理使用闭包</li></ol><h4 id="%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h4><ul><li>双重for循环</li><li>创建一个[],外层循环原数组，内层push元素到新数组；使用filters、findIndex、indexOf、includes等方法过滤</li><li>let arr_set=new Set([数组]) =》Array.from(arrset) or [...arr_set]</li><li>const newArr = arr.filter((item, index) =&gt; arr.indexOf(item) === index)</li></ul><h4 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%BB%E9%87%8D" tabindex="-1">字符串去重 <a class="header-anchor" href="#字符串去重" aria-label="Permalink to &quot;字符串去重&quot;">​</a></h4><ul><li>[...new Set(&#39;ababbc&#39;)].join(&#39;&#39;); // &quot;abc&quot;</li><li>str.split(&#39;&#39;) 转数组；然后通过数组去重的方法过滤；最后.join(&#39;&#39;); 转字符串</li></ul><h4 id="Objects%20%E5%92%8C%20map%E7%9A%84%E6%AF%94%E8%BE%83" tabindex="-1">Objects 和 map的比较 <a class="header-anchor" href="#Objects 和 map的比较" aria-label="Permalink to &quot;Objects 和 map的比较&quot;">​</a></h4><ul><li>一个对象的键只能是字符串、数字或者Symbols，但一个 <code>Map 的键可以是**任意值**。</code></li><li>你可以通过size属性很容易地得到一个<code>Map的键值对个数，</code>而对象的键值对个数只能手动确认。</li><li>map 可以用...展开，Objects 不可以展开</li><li>map可以迭代，可以用for of 遍历，Objects 不可以</li></ul><h4 id="Set%20%E4%B8%8E%20Array%20%E7%9A%84%E6%AF%94%E8%BE%83" tabindex="-1">Set 与 Array 的比较 <a class="header-anchor" href="#Set 与 Array 的比较" aria-label="Permalink to &quot;Set 与 Array 的比较&quot;">​</a></h4><ul><li>set 不允许重复的元素出现</li><li>set 通过size获取长度</li><li>Set 结构的健值就是健名，所以第一个参数和第二个参数永远相同，Array 数组的健名是从 0 开始的有序整数。也称为索引。</li></ul><p>Object.keys、Object.values、Object.entries</p><ul><li>Object.keys(obj)可以用来获取对象的键集合 [kye1,key2]</li><li>Object.values(obj)可以用来获取对象的值集合[ value1,value2]</li><li>Object.entries(obj)可以用来获取对象的键值对集合*[ [ &#39;name&#39;, &#39;林三心&#39; ], [ &#39;age&#39;, 22 ], [ &#39;gender&#39;, &#39;男&#39; ] ]*</li></ul><h4 id="EventLoop" tabindex="-1">EventLoop <a class="header-anchor" href="#EventLoop" aria-label="Permalink to &quot;EventLoop&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">JS\`是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，\`Promise.then\`，\`MutationObserver\`，宏任务的话就是\`setImmediate setTimeout setInterva</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1%EF%BC%88MircoTask%EF%BC%89" tabindex="-1">1、微任务（MircoTask） <a class="header-anchor" href="#1、微任务（MircoTask）" aria-label="Permalink to &quot;1、微任务（MircoTask）&quot;">​</a></h5><p>在 HTML 标准中，并没有明确规定 Microtask，但是实际开发中包含以下四种：</p><ul><li><p>Promise中的then、catch、finally（原理参考：【js进阶】手撕Promise，一码一解析 包懂）</p></li><li><p>MutationObserver（监视 DOM 变动的API，详情参考MDN）</p></li><li><p>Object.observe(废弃：监听标准对象的变化)</p></li><li><p>Process.nextTick（Node环境，通常也被认为是微任务）</p></li></ul><h5 id="2%E3%80%81%E5%AE%8F%E4%BB%BB%E5%8A%A1%EF%BC%88MacroTask%2FTask%EF%BC%89" tabindex="-1">2、宏任务（MacroTask/Task） <a class="header-anchor" href="#2、宏任务（MacroTask%2FTask）" aria-label="Permalink to &quot;2、宏任务（MacroTask/Task）&quot;">​</a></h5><p>基本上，我们将javascript中非微任务（MircoTask）的所有任务都归为宏任务，比如：</p><ul><li>script中全部代码</li><li>DOM操作</li><li>用户交互操作</li><li>所有的网路请求</li><li>定时器相关的 setTimeout、setInterval 等</li></ul><p>···</p><h4 id="%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1" tabindex="-1">宏任务和微任务 <a class="header-anchor" href="#宏任务和微任务" aria-label="Permalink to &quot;宏任务和微任务&quot;">​</a></h4><p>宏任务和微任务都是异步任务，微任务优先级更高，微任务会立即执行先于宏任务。常见的微任务包含Promise.then、mutaionObeserve,宏任务包含script、setTimeout、setInterval..</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">(</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">=&gt;{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">4</span><span style="color:#999999;">)</span><span style="color:#A0ADA0;">// 此处同步执行</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#2F798A;">5</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">func1</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">func2</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()=&gt;{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">func1</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#2F798A;">3</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">p</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">=&gt;{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">func2</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#A0ADA0;">/*</span></span>
<span class="line"><span style="color:#A0ADA0;">4</span></span>
<span class="line"><span style="color:#A0ADA0;">1</span></span>
<span class="line"><span style="color:#A0ADA0;">3</span></span>
<span class="line"><span style="color:#A0ADA0;">5</span></span>
<span class="line"><span style="color:#A0ADA0;">2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">async1</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">async1 start</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">await</span><span style="color:#393A34;"> </span><span style="color:#59873A;">async2</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">async1 end</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span><span style="color:#A0ADA0;">//await 后面的会被作为微任务处理</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">async</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">async2</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">async2</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">script start</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(</span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">setTimeout</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">async1</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">(</span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">promise1</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">();</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">promise2</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}).</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">promise3</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">script end</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">/*</span></span>
<span class="line"><span style="color:#A0ADA0;">    script start</span></span>
<span class="line"><span style="color:#A0ADA0;"> async1 start</span></span>
<span class="line"><span style="color:#A0ADA0;"> async2</span></span>
<span class="line"><span style="color:#A0ADA0;"> promise1</span></span>
<span class="line"><span style="color:#A0ADA0;"> promise2</span></span>
<span class="line"><span style="color:#A0ADA0;"> script end</span></span>
<span class="line"><span style="color:#A0ADA0;">async1 end</span></span>
<span class="line"><span style="color:#A0ADA0;"> promise3</span></span>
<span class="line"><span style="color:#A0ADA0;"> setTimeou</span></span>
<span class="line"><span style="color:#A0ADA0;">    */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="%E6%B7%B1%E6%8B%B7%E8%B4%9D" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h4><ol><li>JSON.parse(JSON.stringfy(obj))，它是不可以拷贝 undefined ， function， RegExp 等等类型的；</li><li>Object.assign(target, source),只能实现一层深拷贝</li><li>loadsh工具库有个 _.cloneDeep(value) <a href="https://lodash.com/docs/4.17.15" target="_blank" rel="noreferrer">https://lodash.com/docs/4.17.15</a></li><li>递归拷贝</li></ol><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">// 定义一个深拷贝函数  接收目标target参数</span></span>
<span class="line"><span style="color:#393A34;">function </span><span style="color:#59873A;">deepClone</span><span style="color:#393A34;">(target) {</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">// 定义一个变量</span></span>
<span class="line"><span style="color:#393A34;">    let result</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">// 如果当前需要深拷贝的是一个对象的话</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> (typeof target </span><span style="color:#AB5959;">==</span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959;">&#39;object&#39;</span><span style="color:#393A34;">) {</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">// 如果是一个数组的话</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> (</span><span style="color:#998418;">Array</span><span style="color:#999999;">.</span><span style="color:#59873A;">isArray</span><span style="color:#393A34;">(target)) {</span></span>
<span class="line"><span style="color:#393A34;">            result </span><span style="color:#999999;">=</span><span style="color:#393A34;"> []</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 将result赋值为一个数组，并且执行遍历</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> (let i </span><span style="color:#1E754F;">in</span><span style="color:#393A34;"> target) {</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#A0ADA0;">// 递归克隆数组中的每一项</span></span>
<span class="line"><span style="color:#393A34;">                result</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#393A34;">(</span><span style="color:#59873A;">deepClone</span><span style="color:#393A34;">(target[i]))</span></span>
<span class="line"><span style="color:#393A34;">            }</span></span>
<span class="line"><span style="color:#393A34;">         </span><span style="color:#A0ADA0;">// 判断如果当前的值是null的话；直接赋值为null</span></span>
<span class="line"><span style="color:#393A34;">        } </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;">(target</span><span style="color:#AB5959;">==</span><span style="color:#999999;">=</span><span style="color:#1E754F;">null</span><span style="color:#393A34;">) {</span></span>
<span class="line"><span style="color:#393A34;">            result </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">null</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">         </span><span style="color:#A0ADA0;">// 判断如果当前的值是一个RegExp对象的话，直接赋值    </span></span>
<span class="line"><span style="color:#393A34;">        } </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;">(target</span><span style="color:#999999;">.</span><span style="color:#393A34;">constructor</span><span style="color:#AB5959;">==</span><span style="color:#999999;">=</span><span style="color:#998418;">RegExp</span><span style="color:#393A34;">){</span></span>
<span class="line"><span style="color:#393A34;">            result </span><span style="color:#999999;">=</span><span style="color:#393A34;"> target</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        }</span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> {</span></span>
<span class="line"><span style="color:#393A34;">         </span><span style="color:#A0ADA0;">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span></span>
<span class="line"><span style="color:#393A34;">            result </span><span style="color:#999999;">=</span><span style="color:#393A34;"> {}</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> (let i </span><span style="color:#1E754F;">in</span><span style="color:#393A34;"> target) {</span></span>
<span class="line"><span style="color:#393A34;">                result[i] </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">deepClone</span><span style="color:#393A34;">(target[i])</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">            }</span></span>
<span class="line"><span style="color:#393A34;">        }</span></span>
<span class="line"><span style="color:#393A34;">     </span><span style="color:#A0ADA0;">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span></span>
<span class="line"><span style="color:#393A34;">    } </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> {</span></span>
<span class="line"><span style="color:#393A34;">        result </span><span style="color:#999999;">=</span><span style="color:#393A34;">  target</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    }</span></span>
<span class="line"><span style="color:#393A34;">     </span><span style="color:#A0ADA0;">// 返回最终结果</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> result</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D-%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8" tabindex="-1">深度拷贝-循环引用 <a class="header-anchor" href="#深度拷贝-循环引用" aria-label="Permalink to &quot;深度拷贝-循环引用&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">deepCopy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">map</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Map</span><span style="color:#999999;">())</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!==</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">object</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">([</span><span style="color:#B07D48;">Date</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">RegExp</span><span style="color:#999999;">].</span><span style="color:#59873A;">includes</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#998418;">constructor</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#59873A;">constructor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">map</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">map</span><span style="color:#999999;">.</span><span style="color:#59873A;">get</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newObj</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Array</span><span style="color:#999999;">.</span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#999999;">[]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{}</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#B07D48;">map</span><span style="color:#999999;">.</span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newObj</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">              </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">==</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">object</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">newObj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">deepCopy</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">],</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">map</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">              </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">newObj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">              </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">newObj</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="js%E8%BF%90%E8%A1%8C%E4%B8%89%E6%AD%A5%E6%9B%B2" tabindex="-1">js运行三步曲 <a class="header-anchor" href="#js运行三步曲" aria-label="Permalink to &quot;js运行三步曲&quot;">​</a></h4><p>创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</p><ol><li><p>语法分析</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">js引擎分析语法与词法是否合法，不合法会报错，合法则进入预编译</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>预编译</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>解释执行</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译</span></span>
<span class="line"><span style="color:#393a34;">预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为&#39;undefined&#39;；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。</span></span>
<span class="line"><span style="color:#393a34;">解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol><h4 id="%E9%A2%84%E7%BC%96%E8%AF%91" tabindex="-1">预编译 <a class="header-anchor" href="#预编译" aria-label="Permalink to &quot;预编译&quot;">​</a></h4><h5 id="%E5%9C%A8%E5%85%A8%E5%B1%80%E4%B8%AD%E9%A2%84%E7%BC%96%E8%AF%91" tabindex="-1">在全局中预编译 <a class="header-anchor" href="#在全局中预编译" aria-label="Permalink to &quot;在全局中预编译&quot;">​</a></h5><ol><li>创建GO对象（Global Object）全局对象。</li><li>找变量声明，将变量名作为GO属性名，值为undefined</li><li>查找函数声明，作为GO属性，值赋予函数体</li></ol><h5 id="%E5%87%BD%E6%95%B0%E4%B8%AD%E9%A2%84%E7%BC%96%E8%AF%91" tabindex="-1">函数中预编译 <a class="header-anchor" href="#函数中预编译" aria-label="Permalink to &quot;函数中预编译&quot;">​</a></h5><ol><li>在函数中创建AO对象</li><li>寻找形参和变量的声明作为AO对象的属性名，值为undefined</li><li>形参和实参相统一</li><li>在函数体里面找函数声明，值赋予函数体。</li></ol><h4 id="%E4%BD%9C%E7%94%A8%E5%9F%9F" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h4><h5 id="%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F" tabindex="-1">全局作用域 <a class="header-anchor" href="#全局作用域" aria-label="Permalink to &quot;全局作用域&quot;">​</a></h5><ul><li>全局作用域在页面打开的时候被创建，页面关闭时候被销毁</li><li>编写在script标签中的变量和函数作用域为全局，页面任意位置可访问</li><li>全局作用域中有个全局对象window,代表一个浏览器窗口,由浏览器创建，可直接调用</li><li>全局作用域中的变量和函数作为window的属性和方法保存</li></ul><h5 id="%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F" tabindex="-1">函数作用域 <a class="header-anchor" href="#函数作用域" aria-label="Permalink to &quot;函数作用域&quot;">​</a></h5><ul><li><p>函数调用的时候，函数作用域被创建,函数执行完毕的时候被销毁</p></li><li><p>每次调用函数都会创建一个新的函数作用域，它们相互独立</p></li><li><p>在函数作用域中可以访问到外层作用域的变量，遵循就近原则获取变量值；外层作用域无法访问内层的变量</p></li></ul><h5 id="%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">global</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">a</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">b</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">     </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">bb</span><span style="color:#999999;">=</span><span style="color:#2F798A;">234</span></span>
<span class="line"><span style="color:#393A34;">     </span><span style="color:#B07D48;">aa</span><span style="color:#999999;">=</span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">aa</span><span style="color:#999999;">=</span><span style="color:#2F798A;">123</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">b</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#59873A;">a</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#A0ADA0;">/////</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">10</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fun</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">a</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">show</span><span style="color:#999999;">(</span><span style="color:#B07D48;">f</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">20</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#999999;">(</span><span style="color:#AB5959;">function</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">f</span><span style="color:#999999;">()</span><span style="color:#393A34;">   </span><span style="color:#A0ADA0;">//10，而不是20; 函数的外层作用域是在函数定义的时候就被决定了，与函数在哪里被调用无关！！！！！！</span></span>
<span class="line"><span style="color:#393A34;">   </span><span style="color:#999999;">})()</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#59873A;">show</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fun</span><span style="color:#999999;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>在函数执行的时候才会形成自己的AO对象，当函数执行完毕之后，作用域链会被剪断、销毁，当下次执行的时候又会被创建</p><h4 id="this%E6%8C%87%E5%90%91" tabindex="-1">this指向 <a class="header-anchor" href="#this指向" aria-label="Permalink to &quot;this指向&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#2F798A;">222</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#393A34;"> </span><span style="color:#999999;">={</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#2F798A;">111</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">say</span><span style="color:#999999;">:</span><span style="color:#AB5959;">function</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fun</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#B07D48;">say</span></span>
<span class="line"><span style="color:#59873A;">fun</span><span style="color:#999999;">()</span><span style="color:#A0ADA0;">//是 fun.call(window)的简写 //222</span></span>
<span class="line"><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#59873A;">say</span><span style="color:#999999;">()</span><span style="color:#A0ADA0;">// a.say.call(a)//111</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">b</span><span style="color:#393A34;"> </span><span style="color:#999999;">={</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#2F798A;">333</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">say</span><span style="color:#999999;">:</span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">fn</span><span style="color:#999999;">()</span><span style="color:#A0ADA0;">//fn.call(window)的简写 //222</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#B07D48;">b</span><span style="color:#999999;">.</span><span style="color:#59873A;">say</span><span style="color:#999999;">(</span><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#B07D48;">say</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">b</span><span style="color:#999999;">.</span><span style="color:#B07D48;">say</span><span style="color:#999999;">=</span><span style="color:#B07D48;">a</span><span style="color:#999999;">.</span><span style="color:#B07D48;">say</span></span>
<span class="line"><span style="color:#B07D48;">b</span><span style="color:#999999;">.</span><span style="color:#59873A;">say</span><span style="color:#999999;">()</span><span style="color:#A0ADA0;">//b.say.call(b)//33</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">x</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#2F798A;">11</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj</span><span style="color:#999999;">={</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">x</span><span style="color:#999999;">:</span><span style="color:#2F798A;">22</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">say</span><span style="color:#999999;">:()=&gt;{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">x</span><span style="color:#999999;">);</span><span style="color:#A0ADA0;">//</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#B07D48;">obj</span><span style="color:#999999;">.</span><span style="color:#59873A;">say</span><span style="color:#999999;">()</span><span style="color:#A0ADA0;">//11</span></span>
<span class="line"><span style="color:#A0ADA0;">//箭头函数本身没有this，它的this是继承自父执行上下文的this,比如这里的箭头函数this.x,箭头函数本身域say平级，类似于Key:value的形式，也就是箭头函数本身所处的环境是obj, 所以它的this指向obj外侧的window,故输出 11</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="%E9%97%AD%E5%8C%85" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h4><h5 id="%E5%8E%9F%E7%90%86" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h5><ul><li><p>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</p></li><li><p>外部访问内部变量</p></li><li><p>函数嵌套</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">a</span><span style="color:#999999;">(){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">aa</span><span style="color:#999999;">=</span><span style="color:#2F798A;">123</span></span>
<span class="line"><span style="color:#393A34;">    </span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fuction</span><span style="color:#999999;">(){</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//b 函数</span></span>
<span class="line"><span style="color:#393A34;">        var </span><span style="color:#B07D48;">bb</span><span style="color:#999999;">=</span><span style="color:#2F798A;">234</span></span>
<span class="line"><span style="color:#393A34;">        console.log(aa)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">a</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#59873A;">res</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//闭包的底层原理就是 作用域链：</span></span>
<span class="line"><span style="color:#A0ADA0;">//由于b在被定义的是时候，在其作用域链上就能访问到aa,所以当它被return 出去的时候，AO.aa形成引用并未被垃圾回收；很好依然能被访问</span></span>
<span class="line"><span style="color:#A0ADA0;">//即 b定义的时候（能看见a函数的AO），和a执行的时候的作用域链相同，a执行完毕后作用域链被销毁，但b定义时候的 作用域链并未被销毁</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="%E9%97%AD%E5%8C%85%E5%BA%94%E7%94%A8" tabindex="-1">闭包应用 <a class="header-anchor" href="#闭包应用" aria-label="Permalink to &quot;闭包应用&quot;">​</a></h4><h5 id="%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h5><p>单例模式简述就是 一次生成多次使用，不重复生成</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">body</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">button</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">id</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">loginbtn</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;">点击登录</span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">button</span><span style="color:#999999;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    &lt;</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createLogin</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">div</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createElement</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">div</span><span style="color:#999999;">.</span><span style="color:#B07D48;">innerHTML</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">我是登录的弹窗</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">div</span><span style="color:#999999;">.</span><span style="color:#B07D48;">style</span><span style="color:#999999;">.</span><span style="color:#B07D48;">display</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">none</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#B07D48;">body</span><span style="color:#999999;">.</span><span style="color:#59873A;">appendChild</span><span style="color:#999999;">(</span><span style="color:#B07D48;">div</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">div</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getSingle</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#A0ADA0;">//该函数在定义的时候就能访问到 result 所以return 到外层，依然可以访问</span></span>
<span class="line"><span style="color:#393A34;">          </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">||</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">fn</span><span style="color:#999999;">.</span><span style="color:#59873A;">apply</span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">arguments</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">create</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">getSingle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">createLogin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">getElementById</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">loginbtn</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">).</span><span style="color:#59873A;">onclick</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">loginLay</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">create</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//第一次调用的时候 result=undefined ，然后创建div赋值给它, 之后调用都延用第一次未被销毁的result,不再去重新创建</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">//注意：函数执行完毕会销毁其作用域，但此处的result属于外层ao，不是函数本身的作用域，会被缓存</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">loginLay</span><span style="color:#999999;">.</span><span style="color:#B07D48;">style</span><span style="color:#999999;">.</span><span style="color:#B07D48;">display</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">block</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">body</span><span style="color:#999999;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h5 id="%E9%98%B2%E6%8A%96" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h5><p>所谓防抖(debounce)，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;">   * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">desc</span><span style="color:#A0ADA0;"> 函数防抖</span></span>
<span class="line"><span style="color:#A0ADA0;">   * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">func</span><span style="color:#A0ADA0;"> 函数</span></span>
<span class="line"><span style="color:#A0ADA0;">   * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">wait</span><span style="color:#A0ADA0;"> 延迟执行毫秒数</span></span>
<span class="line"><span style="color:#A0ADA0;">   * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">immediate</span><span style="color:#A0ADA0;"> true 表立即执行，false 表非立即执行</span></span>
<span class="line"><span style="color:#A0ADA0;">   */</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">debounce</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fun</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3000</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">immediate</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">timer</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ctx</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">arguments</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">timer</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#59873A;">clearTimeout</span><span style="color:#999999;">(</span><span style="color:#B07D48;">timer</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#B07D48;">fun</span><span style="color:#999999;">.</span><span style="color:#59873A;">apply</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">                        </span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#999999;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="%E8%8A%82%E6%B5%81" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h5><p>所谓节流(throttle)，就是指连续触发事件但是在 n 秒中只执行一次函数，节流会稀释函数的执行频率。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">desc</span><span style="color:#A0ADA0;"> 函数节流</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">func</span><span style="color:#A0ADA0;"> 函数</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">wait</span><span style="color:#A0ADA0;"> 延迟执行毫秒数</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> </span><span style="color:#B07D48;">type</span><span style="color:#A0ADA0;"> 1 表时间戳版，2 表定时器版</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">throttle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fun</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">2000</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">immediate</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pre</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ctx</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">arguments</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">type</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">==</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">timer</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">immediate</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                            </span><span style="color:#B07D48;">fun</span><span style="color:#999999;">.</span><span style="color:#59873A;">apply</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                            </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                                </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span></span>
<span class="line"><span style="color:#393A34;">                            </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                            </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                                </span><span style="color:#B07D48;">fun</span><span style="color:#999999;">.</span><span style="color:#59873A;">apply</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                                </span><span style="color:#B07D48;">timer</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span></span>
<span class="line"><span style="color:#393A34;">                            </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">now</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Date</span><span style="color:#999999;">.</span><span style="color:#59873A;">now</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">now</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">-</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pre</span><span style="color:#393A34;"> </span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">delay</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#B07D48;">fun</span><span style="color:#999999;">.</span><span style="color:#59873A;">apply</span><span style="color:#999999;">(</span><span style="color:#B07D48;">ctx</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">arg</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#B07D48;">pre</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">now</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" tabindex="-1">回调函数 <a class="header-anchor" href="#回调函数" aria-label="Permalink to &quot;回调函数&quot;">​</a></h4><p>回调函数即是函数指针的调用，即一个通过函数指针的调用，函数作为参数被传递到另外一个函数中，在适当的时候调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">foo</span><span style="color:#999999;">(</span><span style="color:#B07D48;">callback</span><span style="color:#999999;">){</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">callback</span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#59873A;">callback</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#59873A;">foo</span><span style="color:#999999;">(()=&gt;{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">回调函数</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>问题</strong></p><p>回调函数有一个很大的问题 就是容易造车函数的多层嵌套，形成回调地狱，导致代码的可读性、可维护性非常差，函数之间的耦合性增强，一处变动多出随之发生改变，错误不好寻找或处理</p><p><strong>解决回调地狱</strong></p><p>promise、async/await</p><h4 id="getter%E3%80%81setter" tabindex="-1">getter、setter <a class="header-anchor" href="#getter、setter" aria-label="Permalink to &quot;getter、setter&quot;">​</a></h4><h6 id="%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%20%E7%9B%B4%E6%8E%A5%E5%9C%A8%E5%AF%B9%E8%B1%A1%E5%86%85%E8%AE%BE%E7%BD%AE%E3%80%82%20%E5%A6%82%E4%BB%A3%E7%A0%81%E6%89%80%E7%A4%BA%E3%80%82" tabindex="-1">第一种方式， 直接在对象内设置。 如代码所示。 <a class="header-anchor" href="#第一种方式， 直接在对象内设置。 如代码所示。" aria-label="Permalink to &quot;第一种方式， 直接在对象内设置。 如代码所示。&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj1</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">shaanxi</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">get</span><span style="color:#393A34;"> </span><span style="color:#59873A;">nameGet</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">a</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">set</span><span style="color:#393A34;"> </span><span style="color:#59873A;">nameSet</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj1</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameGet</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//shaanxia</span></span>
<span class="line"><span style="color:#B07D48;">obj1</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameSet</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">set by set keywords</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj1</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameGet</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//set by set keywordsa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h6 id="%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%8C%20%20%E5%A6%82%E4%BB%A3%E7%A0%81%E6%89%80%E7%A4%BA%E3%80%82" tabindex="-1">第二种方式， 如代码所示。 <a class="header-anchor" href="#第二种方式，  如代码所示。" aria-label="Permalink to &quot;第二种方式，  如代码所示。&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj2</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">shaanxi</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#59873A;">__defineGetter__</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">nameGet</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#59873A;">__defineSetter__</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">nameSet</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref1</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#59873A;">__lookupGetter__</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">nameGet</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref2</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#59873A;">__lookupSetter__</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">nameSet</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameGet</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//shaanxi</span></span>
<span class="line"><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameSet</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">set by __defineSetter__</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj2</span><span style="color:#999999;">.</span><span style="color:#B07D48;">nameGet</span><span style="color:#999999;">);</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//set by __defineSetter__</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h6 id="%E7%AC%AC%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%20%E4%BD%BF%E7%94%A8%E5%8E%9F%E5%9E%8B%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E8%AE%BE%E7%BD%AE" tabindex="-1">第三种方式： 使用原型方法进行设置 <a class="header-anchor" href="#第三种方式： 使用原型方法进行设置" aria-label="Permalink to &quot;第三种方式： 使用原型方法进行设置&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">var</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">obj3</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">shaanxi</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">defineProperties</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj3</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">nameGet</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">value</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">nameSet</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">value</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#999999;">(</span><span style="color:#B07D48;">name</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">name</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj3</span><span style="color:#999999;">.</span><span style="color:#59873A;">nameGet</span><span style="color:#999999;">());</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//shaanxi</span></span>
<span class="line"><span style="color:#B07D48;">obj3</span><span style="color:#999999;">.</span><span style="color:#59873A;">nameSet</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">set by Object.defineProperty</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">info</span><span style="color:#999999;">(</span><span style="color:#B07D48;">obj3</span><span style="color:#999999;">.</span><span style="color:#59873A;">nameGet</span><span style="color:#999999;">());</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//set by Object.defineProperty</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="Proxy%E5%AF%B9%E8%B1%A1" tabindex="-1">Proxy对象 <a class="header-anchor" href="#Proxy对象" aria-label="Permalink to &quot;Proxy对象&quot;">​</a></h4><p><a href="https://www.cnblogs.com/kdcg/p/9145385.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/kdcg/p/9145385.html</a></p><h4 id="Promise" tabindex="-1">Promise <a class="header-anchor" href="#Promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h4><h5 id="%E6%A6%82%E8%BF%B0%EF%BC%9A" tabindex="-1">概述： <a class="header-anchor" href="#概述：" aria-label="Permalink to &quot;概述：&quot;">​</a></h5><p>概述：【ES6】异步编程的新型解决方案；以前使用的是回调函数的形式；语法上来看它是一个构造函数，应用上来看我们可以通过promise对象封装我们的异步操作，并获取成功失败的结果。</p><ul><li>支持链式调用、解决回调地狱问题；【回调地狱是指异步回调多层嵌套，不易阅读、不易异常处理】</li><li>有三种状态：pending、fullfilled、rejected</li><li>pending====&gt;fullfilled or pending====&gt;rejected 只存在这两种状态的变化</li><li>then 、catch 方法会默认返回一个成功的promise 对象；我们可以自定义返回一个promise对象以此实现链式调用</li><li>throw 错误 也可以改变promise的状态</li><li>promise 在链式调用过程中 可以在最后添加一个catch(),就能捕获所有异常；即”异常穿透“</li><li>也可以在then 中不写回调函数，继续链式调用 原理与异常穿透一样，都是给了一个默认回调</li><li>链式调用中 可以返回一个pending 状态的promise对象来终止后续链式执行 new Promise(()=&gt;{}) //pending</li></ul><h5 id="%E6%96%B9%E6%B3%95%EF%BC%9A" tabindex="-1">方法： <a class="header-anchor" href="#方法：" aria-label="Permalink to &quot;方法：&quot;">​</a></h5><ul><li><p>Promise.resolve() //返回一个正确的promise对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p1</span><span style="color:#999999;">=</span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">123</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span></span>
<span class="line"><span style="color:#B07D48;">p2</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">=&gt;</span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">))</span><span style="color:#A0ADA0;">// 123</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Promise.reject() //返回一个错误的promise对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p2</span><span style="color:#999999;">=</span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">err</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span></span>
<span class="line"><span style="color:#B07D48;">p2</span><span style="color:#999999;">.</span><span style="color:#59873A;">catch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">=&gt;</span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">))</span><span style="color:#A0ADA0;">//err</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>Promise.all() //接受一个promise对象数组；当所有的promise对象都成功会返回一个成功结果的数组，如果有其中一个失败，则返回失败对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p1</span><span style="color:#999999;">=</span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">123</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p2</span><span style="color:#999999;">=</span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">err</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p3</span><span style="color:#999999;">=</span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">456</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">all</span><span style="color:#999999;">([</span><span style="color:#B07D48;">p1</span><span style="color:#999999;">,</span><span style="color:#B07D48;">p2</span><span style="color:#999999;">,</span><span style="color:#B07D48;">p3</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">=&gt;{</span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)})</span><span style="color:#393A34;">   </span><span style="color:#A0ADA0;">//全都成功   输出成功结果的集合</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">catch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">=&gt;{</span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)})</span><span style="color:#393A34;">   </span><span style="color:#A0ADA0;">// 一个失败；返回失败结果</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//一个出错 继续执行</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p1</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">123</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p2</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">err</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p3</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">456</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">Promise</span><span style="color:#999999;">.</span><span style="color:#59873A;">all</span><span style="color:#999999;">([</span><span style="color:#B07D48;">p1</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p2</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p3</span><span style="color:#999999;">].</span><span style="color:#59873A;">map</span><span style="color:#999999;">(</span><span style="color:#B07D48;">p</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p</span><span style="color:#999999;">.</span><span style="color:#59873A;">catch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">出错了</span><span style="color:#B5695999;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">p</span><span style="color:#999999;">)))</span><span style="color:#A0ADA0;">//为每个promise对象添加catch 捕获</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span><span style="color:#A0ADA0;">// </span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">.</span><span style="color:#59873A;">catch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>Promise.race() 和Promise 类似，但它只捕获最先改变状态的promise对象（无论成功失败） 有一种“比赛谁先跑的快的感觉”；接受promise对象数组；但只返回其中最快运行完毕的那个promise的结果（无论成功失败）</p></li></ul><h5 id="%E5%B0%81%E8%A3%85" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h5><h6 id="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">(</span><span style="color:#B07D48;">executor</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">_this</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[];</span></span>
<span class="line"><span style="color:#999999;">       </span><span style="color:#A0ADA0;">// 通过try catch  捕获异常  改变状态 结果</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">executor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//通过判断确定 是否改变过状态；PromiseState 只能改变一次</span></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">// 此次this 指向Window 所有需要  _this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">// 修改状态  （PromiseState)  fullfilled</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">fullfilled</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">// 设置对象结果值 （PromiseResult) data</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">//为了保障回调异步执行所以此处加定时器</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">                </span><span style="color:#A0ADA0;">//如果有异步缓存正确回调 就遍历执行并传递结果</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#59873A;">onResolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">// 修改状态  （PromiseState) rejected</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">rejected</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">// 设置对象结果值 （PromiseResult) data</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">//为了保障回调异步执行所以此处加定时器</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">                </span><span style="color:#A0ADA0;">//如果有异步缓存错误回调 就遍历执行并传递结果</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#59873A;">onRejected</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加then 方法</span></span>
<span class="line"><span style="color:#998418;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#B07D48;">then</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">   </span><span style="color:#A0ADA0;">//因为then方法最终也是返回一个promise 实例 所有我们需要包裹执行</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">_this</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//保持this</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">callback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">type</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//捕获错误 返回错误状态非promise</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">type</span><span style="color:#999999;">(</span><span style="color:#B07D48;">_this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseResult</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPromise</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//promise  转为成功其对应的状态</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">result</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//非promise  转为成功状态promise</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">fullfilled</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">//为了保障回调异步执行所以此处加定时器</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">callback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onResolve</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">rejected</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">            </span><span style="color:#A0ADA0;">//为了保障回调异步执行所以此处加定时器</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">callback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onRejected</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">PromiseState</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//此时异步任务 还未指向完毕 promise状态尚未改变</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">({</span><span style="color:#393A34;">   </span><span style="color:#A0ADA0;">//存储回调 等待状态改变后调用</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">onResolve</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">callback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onResolve</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;">    </span><span style="color:#A0ADA0;">// 因为可能会存在用户调用多次 then ；所有就会有多份回调；所有采用数组保持回调</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">onRejected</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">callback</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onRejected</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加catch 方法</span></span>
<span class="line"><span style="color:#998418;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">onRejected</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">onRejected</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加resolve 方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#59873A;">resolve</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//捕获错误 返回错误状态非promise</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPromise</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//promise  转为成功其对应的状态</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">value</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//非promise  转为成功状态promise</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加reject 方法</span></span>
<span class="line"><span style="color:#B07D48;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#59873A;">reject</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加all 方法</span></span>
<span class="line"><span style="color:#B07D48;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#59873A;">all</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">promises</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[]</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;">++</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">].</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">count</span><span style="color:#AB5959;">++</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">result</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">v</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B07D48;">i</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">//添加race                方法</span></span>
<span class="line"><span style="color:#B07D48;">MyPromise</span><span style="color:#999999;">.</span><span style="color:#59873A;">race</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">promises</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;">++</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">].</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">v</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br></div></div><h6 id="%E7%B1%BB" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#AB5959;">class</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPromise</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">constructor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">executor</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">that</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">null</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[];</span><span style="color:#A0ADA0;">//异步回调存储器</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">executor</span><span style="color:#999999;">(</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">fullfilled</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//保障异步执行回调</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#59873A;">onResolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">pending</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">rejected</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseResult</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">data</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//保障异步执行回调</span></span>
<span class="line"><span style="color:#393A34;">                   </span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">(</span><span style="color:#B07D48;">item</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">item</span><span style="color:#999999;">.</span><span style="color:#59873A;">onReject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">data</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">                </span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#59873A;">onResolve</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#59873A;">onReject</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">throw</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">err</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">//设置默认回调 可以保障在不传递回调的情况下 then catch 任然可以返回一个promise</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">that</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">fullfilled</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#A0ADA0;">//如果成功执行 then回调</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;">  </span><span style="color:#A0ADA0;">//保障回调异步执行</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">callbackHandle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onResolve</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseStatus</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">rejected</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#A0ADA0;">//如果失败 catch失败回调</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">callbackHandle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onReject</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">setTimeout</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">                    </span><span style="color:#A0ADA0;">//可能存在链式调用多个异步回调 所以需要存储到集合中</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">callbacks</span><span style="color:#999999;">.</span><span style="color:#59873A;">push</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#59873A;">onResolve</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">callbackHandle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onResolve</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#59873A;">onReject</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">callbackHandle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onReject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">callbackHandle</span><span style="color:#999999;">(</span><span style="color:#B07D48;">fun</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">fun</span><span style="color:#999999;">((</span><span style="color:#B07D48;">that</span><span style="color:#999999;">.</span><span style="color:#B07D48;">promiseResult</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPromise</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#B07D48;">res</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">((</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">catch</span><span style="color:#999999;">(</span><span style="color:#B07D48;">onReject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#AB5959;">undefined</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">onReject</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">static</span><span style="color:#393A34;"> </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">try</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">instanceof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPromise</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">value</span><span style="color:#999999;">.</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">),</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">e</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">catch</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">err</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">static</span><span style="color:#393A34;"> </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">static</span><span style="color:#393A34;"> </span><span style="color:#59873A;">all</span><span style="color:#999999;">(</span><span style="color:#B07D48;">promises</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[])</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#A0ADA0;">//存储成功promise个数</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">result</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[]</span><span style="color:#A0ADA0;">//存储成功结果</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;">++</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">].</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">count</span><span style="color:#AB5959;">++</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#B07D48;">result</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                        </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">result</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">e</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">static</span><span style="color:#393A34;"> </span><span style="color:#59873A;">race</span><span style="color:#999999;">(</span><span style="color:#B07D48;">promises</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">promises</span><span style="color:#999999;">])</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPromise</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolve</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">reject</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">let</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">0</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#393A34;"> </span><span style="color:#999999;">&lt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">.</span><span style="color:#998418;">length</span><span style="color:#999999;">;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">i</span><span style="color:#AB5959;">++</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#B07D48;">promises</span><span style="color:#999999;">[</span><span style="color:#B07D48;">i</span><span style="color:#999999;">].</span><span style="color:#59873A;">then</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">resolve</span><span style="color:#999999;">(</span><span style="color:#B07D48;">r</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">r</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">                    </span><span style="color:#59873A;">reject</span><span style="color:#999999;">(</span><span style="color:#B07D48;">e</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">                </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">            </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br></div></div><h4 id="async%5Cawait" tabindex="-1">async\\await <a class="header-anchor" href="#async\\await" aria-label="Permalink to &quot;async\\await&quot;">​</a></h4><ul><li>async 函数返回一个promise 对象；返回结果类似于promise.then</li><li>await 必须写在async函数中</li><li>如果await 右侧是 promise,则返回promise的成功值，失败值需要try catch 去捕获；如果await 右侧是非promise,则直接返回该值</li></ul><h3 id="module%20%E6%A8%A1%E5%BC%8F" tabindex="-1">module 模式 <a class="header-anchor" href="#module 模式" aria-label="Permalink to &quot;module 模式&quot;">​</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">script</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#393A34;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">module</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;">import { a } from &#39;./a.js&#39;</span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">复制代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在主流的现代浏览器中，script 标签的属性可以加上 <code>type=&quot;module&quot;</code>，浏览器会对其内部的 import 引用发起 HTTP 请求，获取模块内容。这时 script 的行为会像是 defer 一样，在后台下载，并且等待 DOM 解析</p><p>Vite 就是利用浏览器支持原生的 <code>es module</code> 模块，开发时跳过打包的过程，提升编译效率</p><h3 id="preload" tabindex="-1">preload <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;preload&quot;">​</a></h3><p>link 标签的 preload 属性：用于提前加载一些需要的依赖，这些资源会优先加载</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">&lt;link rel=&quot;preload&quot; as=&quot;script&quot; href=&quot;index.js&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>preload 特点：</p><p>1）preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件；</p><p>2）preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload 会预加载相应的脚本代码，待到需要时自行调用；</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">实际上，预加载是一个广义的概念，prefetch只是具体实现方式之一，本节我们介绍下另外一种预加载方式preload。上文我们提到，preload与prefetch同属于浏览器的Resource-Hints，用于辅助浏览器进行资源优化。为了对两者进行区分，prefetch通常翻译为预提取，preload则翻译为预加载。</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">元素的rel属性的属性值preload能够让你在你的HTML页面中元素内部书写一些声明式的资源获取请求，可以指明哪些资源是在页面加载完成后即刻需要的。对于这种即刻需要的资源，你可能希望在页面加载的生命周期的早期阶段就开始获取，在浏览器的主渲染机制介入前就进行预加载。这一机制使得资源可以更早的得到加载并可用，且更不易阻塞页面的初步渲染，进而提升性能。</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">简单来说，就是通过&lt;link rel=”preload” href=”xxx” as=”xx”&gt;标签显式声明一个高优先级资源，强制浏览器提前请求资源，同时不阻塞文档正常onload。我们同样用一个实际案例进行详细介绍</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="prefetch" tabindex="-1">prefetch <a class="header-anchor" href="#prefetch" aria-label="Permalink to &quot;prefetch&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-light"><code><span class="line"><span style="color:#393a34;">&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;index.js&quot;&gt;</span></span>
<span class="line"><span style="color:#393a34;">prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">prefetch 特点：</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">1）pretch 加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">2）当页面跳转时，未完成的 prefetch 请求不会被中断</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><a href="https://cloud.tencent.com/developer/article/2164138" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/2164138</a></p><h3 id="axios%E3%80%81fetch%20%E5%92%8C%20ajax%20%E7%AD%89%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3" tabindex="-1">axios、fetch 和 ajax 等的区别详解 <a class="header-anchor" href="#axios、fetch 和 ajax 等的区别详解" aria-label="Permalink to &quot;axios、fetch 和 ajax 等的区别详解&quot;">​</a></h3><p><a href="https://www.cnblogs.com/bala/p/11650296.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/bala/p/11650296.html</a></p><h3 id="%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fapi" tabindex="-1">正则表达式api <a class="header-anchor" href="#正则表达式api" aria-label="Permalink to &quot;正则表达式api&quot;">​</a></h3><p><a href="https://blog.csdn.net/Jk200165/article/details/123158527" target="_blank" rel="noreferrer">https://blog.csdn.net/Jk200165/article/details/123158527</a></p>`,230),e=[o];function r(c,t,y,i,A,b){return n(),a("div",null,e)}const m=s(p,[["render",r]]);export{B as __pageData,m as default};
